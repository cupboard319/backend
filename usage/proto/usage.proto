syntax = "proto3";
import "google/protobuf/struct.proto";

package usage;

option go_package = "./proto;usage";

service Usage {
	rpc Read(ReadRequest) returns (ReadResponse) {}
	rpc Sweep(SweepRequest) returns (SweepResponse) {}
	rpc DeleteCustomer(DeleteCustomerRequest) returns (DeleteCustomerResponse) {}
	rpc SaveEvent(SaveEventRequest) returns (SaveEventResponse) {}
	rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {}
	rpc ListAPIRanks(ListAPIRanksRequest) returns (ListAPIRanksResponse) {}
	rpc ReadMonthlyTotal(ReadMonthlyTotalRequest) returns (ReadMonthlyTotalResponse) {}
	rpc ReadMonthly(ReadMonthlyRequest) returns (ReadMonthlyResponse) {}
}

message ReadRequest {
	string customer_id = 1;
	bool detail = 2;
}

message UsageHistory {
	string api_name = 1;
	repeated UsageRecord records = 2;
}

message UsageRecord {
	int64 date = 1;
	int64 requests = 2;
}

message ReadResponse {
	map<string, UsageHistory> usage = 1;
}

message SweepRequest {}
message SweepResponse {}

message DeleteCustomerRequest {
	string id = 1;
}

message DeleteCustomerResponse {}

message Event {
	string id = 1;
	string table = 2;
	int64 created = 3;
	google.protobuf.Struct record = 4;
}

// Event is anything that we might want to record. "api-calls", "api-visits", etc.
// "Table" can be anything.
message SaveEventRequest {
	Event event = 1;
}

message SaveEventResponse {}

// Will return the last 20 events. No paging currently
message ListEventsRequest{
	string table = 1;
}

message ListEventsResponse {
	repeated Event events = 1;
}

message ListAPIRanksRequest {

}

message ListAPIRanksResponse {
	repeated APIRankItem ranks = 1;
	repeated APIRankUserItem global_top_users = 3;
}

message APIRankItem {
	string api_name = 1;
	int32 position = 2;
	repeated APIRankUserItem top_users = 3;
	// popularity is a 1-10 rating of how much usage this API is getting
	int32 popularity = 4;
	string api_display_name = 5;
}

message APIRankUserItem {
	string user_name = 1;
	int32 position = 2;
}

message ReadMonthlyTotalRequest {
	string customer_id = 1;
	bool detail = 2; // do we want the endpoint breakdown
}

message ReadMonthlyTotalResponse {
	int64 requests = 1; // total requests in the month
 	map<string, int64> endpoint_requests = 2; // requests for each endpoint in the month
}

message ReadMonthlyRequest {
	string customer_id = 1;
	repeated string endpoints = 2;
}

message ReadMonthlyResponse {
	map<string, int64> requests = 1;
}
